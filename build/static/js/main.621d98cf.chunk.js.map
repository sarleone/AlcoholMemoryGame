{"version":3,"sources":["components/NavBar/NavBar.js","components/Footer/Footer.js","components/Wrapper/Wrapper.js","components/AlcoholCard/AlcoholCard.js","components/JumboT/JumboT.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","className","href","count","topCount","Footer","Wrapper","children","AlcoholCard","alt","name","src","image","onClick","onClickHandler","id","JumboT","style","backgroundImage","concat","App","state","alcohols","shuffleCards","temp","array","_this","i","length","j","Math","floor","random","setState","restartGame","forEach","alcohol","clicked","found","find","alert","_this2","this","components_NavBar_NavBar","components_JumboT_JumboT","components_Wrapper_Wrapper","map","components_AlcoholCard_AlcoholCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.621d98cf.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./NavBar.css\";\n\nconst NavBar = props => (\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary navbar fixed-top\">\n        <p className=\"navbar-brand\" href=\"#\">Clicky Game!</p>\n        <p className=\"nav-link-center\"> Click an image to begin! </p>\n        <p className=\"nav-link-right\"> Score: <span>{props.count}</span> |  Top Score: <span>{props.topCount}</span></p>\n    </nav>\n);\n\nexport default NavBar;","import React from \"react\";\nimport \"./Footer.css\";\n\nconst Footer = () => (\n  <footer className=\"footer\">\n    <span>Clicky Game 2018 by Sarah Leone</span>\n  </footer>\n);\n\nexport default Footer;\n","import React from \"react\";\nimport \"./Wrapper.css\";\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;\n","import React from \"react\";\nimport \"./AlcoholCard.css\";\n\nconst AlcoholCard = props => (\n  <div className=\"card\">\n    <div className=\"img-container\">\n      <img alt={props.name} src={props.image} onClick={()=> props.onClickHandler(props.id)}/>\n    </div>\n  </div>\n);\n\nexport default AlcoholCard;","import React from \"react\";\nimport \"./JumboT.css\";\n\nconst JumboT = props => (\n  <div className=\"jumboT text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n    {props.children}\n  </div>\n);\n\nexport default JumboT;\n","import React, { Component } from 'react';\n//import logo from './logo.svg';\nimport './App.css';\nimport NavBar from \"./components/NavBar\";\nimport Footer from \"./components/Footer\";\nimport Wrapper from \"./components/Wrapper\";\nimport AlcoholCard from \"./components/AlcoholCard\";\nimport JumboT from './components/JumboT';\nimport alcohols from \"./alcohols.json\";\n\nclass App extends Component {\n  state = {\n    alcohols,\n    count:1,\n    topCount:0\n  };\n\n  shuffleCards = () => {\n    let array = this.state.alcohols;\n    let i = array.length -1,\n    j = 0,\n    temp;\n    while(i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      temp = array[i];\n      array[i] = array[j];\n      array[j] = temp;\n    }\n    return this.setState({alcohols:array});\n  };\n\n  restartGame = () => {\n    this.shuffleCards();\n    this.state.alcohols.forEach(function(alcohol) {\n      alcohol.clicked = false;\n    });\n    this.setState({count: 1});\n    if (this.state.count > this.state.topCount) {\n      this.setState({topCount: this.state.count});\n    }\n  }\n\n  onClickHandler = id => {\n    let found = this.state.alcohols.find(function(alcohol){\n      return alcohol.id === id;\n    })\n    if (found.clicked){\n      this.restartGame();\n      alert(\"You don't have to go home but you can't win here.\");\n    } else {\n      found.clicked = true;\n      this.shuffleCards();\n      this.setState({count: this.state.count +1});\n      if (this.state.count === 12) {\n        alert(\"You're my boy, Blue!\");\n        this.restartGame();\n      }\n    }\n  }\n  \n  render() {\n    return (\n      <div>\n        <NavBar count = {this.state.count} topCount ={this.state.topCount}/>\n        <JumboT>\n      <h1>Alcohol Memory Game</h1>\n      <h2><i>Don't click the same bottle twice and you will go straight to winner town!</i></h2>\n        </JumboT>\n        <Wrapper>\n          {this.state.alcohols.map((alcohol, i) => (\n            <AlcoholCard\n              onClickHandler={this.onClickHandler}\n              id={alcohol.id}\n              key={alcohol.id}\n              image={alcohol.image}\n            />\n          ))}\n        </Wrapper>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}